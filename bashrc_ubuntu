# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi


# git functions to use for prompt, from ezprompt.net
# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo "[${BRANCH}${STAT}]"
	else
		echo ""
	fi
}

# get current status of git repo
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}


# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    # not used
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    # PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '  # original
    # PS1='${debian_chroot:+($debian_chroot)}\w:\$ '  # before adding git status
    PS1="\[\e[34m\]\w\[\e[m\]\[\e[32m\]\`parse_git_branch\`\[\e[m\]\[\e[34m\]\\$\[\e[m\] " # blue pwd with green git br&st
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -AlF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
# 
# if [ -f ~/.bash_aliases ]; then
#     . ~/.bash_aliases
# fi

# personal aliases
alias firefox='firefox > /dev/null 2>&1 &'
alias netr='nmcli nm enable false && nmcli nm enable true && sleep 10 && ifconfig | grep inet'
alias ack='ack-grep --ackrc=$HOME/.ackrc'
alias fucking='sudo'
alias wtf='--help'
alias WTF='--help'
alias bs='bin/spring'
alias be='bundle exec'
alias ag='clear && ag'
alias strip_gitst_src_dir='awk "{sub(\"src/\", \"\");print}"'
alias strip_gitst_first_col='cut -c4-'
alias gitst_clean='git st --porcelain | strip_gitst_first_col | strip_gitst_src_dir'
alias load_chruby='source /usr/local/share/chruby/chruby.sh'
alias gre='git lol -10 && git br && git st'
alias dc='docker-compose'
alias dog='pygmentize -g -O style=colorful,linenos=1'
alias ag='ag --path-to-agignore ~/.agignore'
alias vim='nvim'
alias xclip='xclip -selection c'
alias gst='git status'
alias gaa='git add .'
alias gcm='git commit'
alias gf='git fetch'

# project aliases
alias cdnet='cd ~/projects/rails/netops/src'
alias cddot='cd ~/projects/rails/dots/src'
# tmux sessions
alias tsnet='tmux new -s netops'
alias tsdot='tmux new -s dots'
# tmux attach/detach
alias tanet='tmux attach -t netops'
alias tadot='tmux attach -t dots'
alias detach='tmux detach'

# open vim with current git unstaged files (git working vim)
alias gwvim='nvim $(gitst_clean)'

# open vim with files modified in current git HEAD~1 (unstaged, staged, files modified in latest)
alias ghvim='nvim $(git df HEAD~1 --name-only | strip_gitst_src_dir)'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# chruby config -- removed, to be handled with individual direnvrc files
# source /usr/local/share/chruby/chruby.sh
# source /usr/local/share/chruby/auto.sh     # optional (provides 'auto' switching to ruby declared in .ruby-version file)


# netops project related
# export USE_SPRING=false         # set to true if using spring
# export DISABLE_JRUBY_JOBS=true  # set to false if using jruby

# docker
# export DOCKER_HOST=tcp://localhost:4243

# direnv
eval "$(direnv hook bash)"


export PATH=$HOME/local/bin:$PATH
export EDITOR=nvim

# node.js
export NODE_PATH=$HOME/local/lib/node_modules


# docker cleanup
alias docker_rm_old='docker rm $(docker ps -q -f status=exited)'
alias docker_rmi_old='docker rmi $(docker images -q -f "dangling=true")'

source $HOME/bin/ruby_switcher.sh

# avscan report summary when opening a new shell
/usr/local/uvscan/report.sh

# export for git CAC enable
export LD_LIBRARY_PATH=~/usr/lib/x86_64-linux-gnu

[ -z "${TMUX}" ] && export TERM=xterm-256color
eval `dircolors $HOME/.dir_colors/dircolors`
